stages:
  - prepare
  - test
  - build
  - artifact

variables:
  UNITY_CI_IMAGE: unityci/editor
  IMAGE_VERSION: 1
  UNITY_DIR: devopsdays_demo
  BUILD_NAME: ExampleProjectName
  UNITY_ACTIVATION_FILE: ./unity3d.alf
  # You can expose this in Unity via Application.version
  VERSION_NUMBER_VAR: $CI_COMMIT_REF_SLUG-$CI_PIPELINE_ID-$CI_JOB_ID
  VERSION_BUILD_VAR: $CI_PIPELINE_IID

image: $UNITY_CI_IMAGE:$UNITY_VERSION-base-$IMAGE_VERSION

.build: &build
  stage: build_and_test
  <<: *unity_defaults
  script:
    - chmod +x ./ci/build.sh && ./ci/build.sh
  artifacts:
    paths:
      - $UNITY_DIR/Builds/
  # https://gitlab.com/gableroux/unity3d-gitlab-ci-example/-/issues/83
  # you may need to remove or replace these to fit your need if you are using your own runners
  tags:
    - gitlab-org

get-unity-version:
  image: alpine
  stage: prepare
  variables:
    GIT_DEPTH: 1
  script:
    - echo $CI_PROJECT_DIR
    - echo UNITY_VERSION=$(cat $UNITY_DIR/ProjectSettings/ProjectVersion.txt | grep "m_EditorVersion:.*" | awk '{ print $2}') | tee prepare.env
  artifacts:
    reports:
      dotenv: prepare.env

test:
  stage: test
  needs:
    - job: get-unity-version
      artifacts: true
  script:
    - chmod +x ./ci/build.sh && ./ci/build.sh

build:windows:
  stage: build
  <<: *build
  needs: 
    - job: test
    - job: get-unity-version
      artifacts: true
  variables:
    BUILD_TARGET: StandaloneWindows64

build:android:
  stage: build
  <<: *build
  needs: 
    - job: test
    - job: get-unity-version
      artifacts: true
  variables:
    BUILD_TARGET: Android

expose-artifact:windows:
  stage: artifact
  needs:
    - job: test
    - job: build:windows
      artifacts: true
    - job: get-unity-version
      artifacts: true
  script:
    - echo "Exposing build artifact for Windows"
  
expose-artifact:android:
  stage: artifact
  needs:
    - job: test
    - job: build:android
      artifacts: true
    - job: get-unity-version
      artifacts: true
  script:
    - echo "Exposing build artifact for Android"

